; Script generated by the Inno Setup Script Wizard.

#define MyAppName "EsmartV2"
#define MyAppVersion "1.0"
#define MyAppPublisher "EnakheOrg, Inc."
#define MyAppURL "https://www.example.com/"
#define MyAppExeName "ESMART.Presentation.exe"
#define MyAppId "{{D1AC2738-F23A-4F7A-B911-65AF2A6C2F4E}"

[Setup]
AppId={#MyAppId}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir=C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2
OutputBaseFilename=Esmart
SetupIconFile=C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Presentation\favicon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Presentation\bin\x86\Debug\net9.0-windows\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion restartreplace
Source: "C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Presentation\bin\x86\Debug\net9.0-windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs restartreplace
Source: "C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Presentation\favicon.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Prerequisite\SQLServer.exe"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Prerequisite\NET4.8.exe"; DestDir: "{tmp}"; Flags: ignoreversion
Source: "C:\Users\izuag\OneDrive\Desktop\ESMART\ESMARTV2\Presentation\bin\x86\Debug\net9.0-windows\appsettings.json"; DestDir: "{userappdata}\ESMART"; Flags: ignoreversion

[Registry]
Root: HKA; Subkey: "Software\Classes\.myp\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppExeName}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppExeName}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppExeName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppExeName}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppExeName}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\favicon.ico"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\favicon.ico"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "Launch {#MyAppName}"; Flags: postinstall nowait skipifsilent

[Code]
function IsSQLServerInstalled(): Boolean;
begin
  Result := RegKeyExists(HKLM, 'SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL') or
            RegKeyExists(HKLM, 'SOFTWARE\Microsoft\Microsoft SQL Server Local DB\Installed Versions');
end;

function IsDotNet48Installed(): Boolean;
var
  installValue: Cardinal;
begin
  Result := RegQueryDWordValue(HKLM, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', installValue) and (installValue >= 528040);
end;

function InstallSQLServer(): Boolean;
var
  ResultCode: Integer;
begin
  Result := Exec(ExpandConstant('{tmp}\SQLServer.exe'),
    '/QS /ACTION=Install /IACCEPTSQLSERVERLICENSETERMS /FEATURES=SQLEngine /INSTANCENAME=MSSQLSERVER /SQLSVCACCOUNT="NT AUTHORITY\NETWORK SERVICE" /SQLSYSADMINACCOUNTS="BUILTIN\ADMINISTRATORS"',
    '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  if Result and (ResultCode = 0) then
  begin
    MsgBox('SQL Server installed successfully.', mbInformation, MB_OK);
    Result := True;
  end
  else
  begin
    MsgBox('SQL Server installation failed. Please try installing manually.', mbError, MB_OK);
    Result := False;
  end;
end;

procedure InstallDotNetFramework();
var
  ResultCode: Integer;
begin
  MsgBox('.NET Framework 4.8 is required to run this application. The installer will now run.', mbInformation, MB_OK);
  Exec(ExpandConstant('{tmp}\NET4.8.exe'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
  if ResultCode <> 0 then
    MsgBox('.NET Framework 4.8 installation failed. Please try installing manually.', mbError, MB_OK);
end;

procedure InitializeWizard();
begin
  if not IsDotNet48Installed() then
    InstallDotNetFramework();

  if not IsSQLServerInstalled() then
    InstallSQLServer();
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
  begin
    if not IsSQLServerInstalled() then
    begin
      if not InstallSQLServer() then
      begin
        MsgBox('SQL Server installation failed. Please try installing manually.', mbError, MB_OK);
      end;
    end;
  end;
end;
